# Stage 1: Use NPM to run build command
FROM node:20 AS node-build

COPY ["package*.json","vite.config.js","./"]

RUN npm install

COPY src/static /src/static

WORKDIR /src

RUN npm run build

# Stage 2: Use Python for running the app
FROM python:3.10-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV POETRY_VIRTUALENVS_CREATE=false
ENV PYTHONPATH=/usr/src/rh/src

# Install dependencies
RUN apt-get update && apt-get install -y \
    curl cron && \
    apt-get clean && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/*

# Install Python dependencies
RUN pip install poetry

COPY docker/django/django-entrypoint.sh /usr/src/rh/django-entrypoint.sh
RUN chmod a+x /usr/src/rh/django-entrypoint.sh

COPY docker/django/rh-tasks-cron /etc/cron.d/rh-tasks-cron
RUN chmod 0644 /etc/cron.d/rh-tasks-cron
RUN crontab /etc/cron.d/rh-tasks-cron
RUN touch /var/log/cron.log

# to preserve the docker cache
COPY ["README.md", "Makefile", "poetry.lock","pyproject.toml","/usr/src/rh/"]

# Set the working directory
WORKDIR /usr/src/rh
RUN poetry install --without dev --no-root --no-interaction --no-directory --no-ansi
# copy project code -> src to /usr/src/rh/src
COPY src /usr/src/rh/src

# Take output files from Stage 1
COPY --from=node-build /src/static/dist /usr/src/rh/src/static/dist

ENTRYPOINT ["/usr/src/rh/django-entrypoint.sh"]

# Gunicorn will be used to run the server
CMD ["gunicorn", "--bind", "0.0.0.0:8000","--error-logfile","-","--workers=4","src.core.wsgi:application"]
